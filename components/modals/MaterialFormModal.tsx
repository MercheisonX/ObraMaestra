import React, { useState, useEffect, FormEvent } from 'react';
import Modal from '../ui/Modal';
import Input from '../ui/Input';
import Button from '../ui/Button';
import ImageUpload from '../ui/ImageUpload';
import { Material } from '../../types';
import { CURRENCY_FORMATTER } from '../../constants';
import AlertModal from './AlertModal'; // For displaying validation errors

interface MaterialFormModalProps {
  isOpen: boolean;
  onClose: () => void;
  onMaterialSaved: (material: Material) => void;
  material?: Material | null;
}

const MaterialFormModal: React.FC<MaterialFormModalProps> = ({ isOpen, onClose, onMaterialSaved, material }) => {
  const [name, setName] = useState('');
  const [unitPrice, setUnitPrice] = useState(0);
  const [unit, setUnit] = useState('');
  const [stock, setStock] = useState(0);
  const [description, setDescription] = useState('');
  const [supplier, setSupplier] = useState('');
  const [photoUrl, setPhotoUrl] = useState<string | null>(null);
  const [minStockThreshold, setMinStockThreshold] = useState<number | undefined>(undefined);


  const [isAlertOpen, setIsAlertOpen] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');

  useEffect(() => {
    if (material) {
      setName(material.name);
      setUnitPrice(material.unitPrice);
      setUnit(material.unit);
      setStock(material.stock);
      setDescription(material.description || '');
      setSupplier(material.supplier || ''); // Legacy field
      setPhotoUrl(material.photoUrl || null);
      setMinStockThreshold(material.minStockThreshold);
    } else {
      // Reset form
      setName('');
      setUnitPrice(0);
      setUnit('');
      setStock(0);
      setDescription('');
      setSupplier('');
      setPhotoUrl(null);
      setMinStockThreshold(undefined);
    }
  }, [material, isOpen]);

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
     if (!name.trim() || !unit.trim()) {
        setAlertMessage("Nombre y unidad son obligatorios.");
        setIsAlertOpen(true);
        return;
    }
    if (unitPrice < 0) {
        setAlertMessage("El precio unitario no puede ser negativo.");
        setIsAlertOpen(true);
        return;
    }
    if (stock < 0) {
        setAlertMessage("El stock no puede ser negativo.");
        setIsAlertOpen(true);
        return;
    }
    if (minStockThreshold !== undefined && minStockThreshold < 0) {
        setAlertMessage("El umbral de stock no puede ser negativo.");
        setIsAlertOpen(true);
        return;
    }


    const materialData: Material = {
      id: material?.id || '', // ID will be generated by localStorageManager if new
      name,
      unitPrice,
      unit,
      stock,
      description,
      supplier, // Legacy field
      photoUrl: photoUrl || undefined,
      minStockThreshold: minStockThreshold === undefined || isNaN(minStockThreshold) ? undefined : Number(minStockThreshold),
    };
    onMaterialSaved(materialData);
  };

  return (
    <>
    <Modal isOpen={isOpen} onClose={onClose} title={material ? 'Editar Material' : 'Añadir Nuevo Material'} size="lg">
      <form onSubmit={handleSubmit} className="space-y-4">
        <ImageUpload 
            onImageSelected={setPhotoUrl} 
            currentImageUrl={photoUrl}
            label="Foto del Material (Opcional)"
        />
        <Input label="Nombre del Material" value={name} onChange={(e) => setName(e.target.value)} required />
        <Input label="Unidad de Medida" value={unit} onChange={(e) => setUnit(e.target.value)} placeholder="Ej: bulto, galón, metro, unidad" required />
        <Input label="Precio Unitario (COP)" type="number" value={unitPrice.toString()} onChange={(e) => setUnitPrice(parseFloat(e.target.value) || 0)} min="0" step="any" required />
        <Input label="Cantidad en Stock" type="number" value={stock.toString()} onChange={(e) => setStock(parseInt(e.target.value) || 0)} min="0" required />
        <Input 
            label="Umbral de Alerta de Stock (Opcional)" 
            type="number" 
            value={minStockThreshold === undefined ? '' : minStockThreshold.toString()} 
            onChange={(e) => setMinStockThreshold(e.target.value === '' ? undefined : parseInt(e.target.value))} 
            min="0"
            placeholder="Ej: 10"
            helperText="Recibirá una alerta si el stock baja de este nivel."
        />
        <Input label="Proveedor (Nombre - Opcional, Legado)" value={supplier} onChange={(e) => setSupplier(e.target.value)} placeholder="Ej: Homecenter, Argos" />
        <div>
            <label htmlFor="material-description" className="block text-sm font-bold text-[var(--color-text-secondary)] mb-1.5">Descripción (Opcional)</label>
            <textarea
                id="material-description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                rows={3}
                className="block w-full px-4 py-3 bg-[var(--color-surface-2)] border-2 border-[var(--color-border)] rounded-lg text-[var(--color-text-primary)] placeholder-[var(--color-text-secondary)] focus:outline-none focus:ring-2 focus:ring-[var(--color-aquamarine)] focus:border-[var(--color-aquamarine)] sm:text-sm font-medium"
                placeholder="Características, marca, color, etc."
            />
        </div>
        <div className="flex justify-end space-x-3 pt-2">
          <Button type="button" variant="secondary" onClick={onClose}>Cancelar</Button>
          <Button type="submit" variant="primary">{material ? 'Guardar Cambios' : 'Añadir Material'}</Button>
        </div>
      </form>
    </Modal>
    <AlertModal
        isOpen={isAlertOpen}
        onClose={() => setIsAlertOpen(false)}
        title="Error de Validación"
        message={alertMessage}
    />
    </>
  );
};

export default MaterialFormModal;