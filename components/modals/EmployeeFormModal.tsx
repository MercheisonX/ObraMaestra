
import React, { useState, useEffect, FormEvent } from 'react';
import Modal from '../ui/Modal';
import Input from '../ui/Input';
import Button from '../ui/Button';
import ImageUpload from '../ui/ImageUpload';
import { Employee } from '../../types';
import { CURRENCY_FORMATTER } from '../../constants';
import AlertModal from './AlertModal'; // For displaying validation errors

interface EmployeeFormModalProps {
  isOpen: boolean;
  onClose: () => void;
  onEmployeeSaved: (employee: Employee) => void;
  employee?: Employee | null;
}

const EmployeeFormModal: React.FC<EmployeeFormModalProps> = ({ isOpen, onClose, onEmployeeSaved, employee }) => {
  const [name, setName] = useState('');
  const [specialty, setSpecialty] = useState('');
  const [dailySalary, setDailySalary] = useState(0);
  const [cedula, setCedula] = useState('');
  const [phone, setPhone] = useState('');
  const [email, setEmail] = useState('');
  const [address, setAddress] = useState('');
  const [photoUrl, setPhotoUrl] = useState<string | null>(null);
  const [notes, setNotes] = useState('');

  const [isAlertOpen, setIsAlertOpen] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');

  useEffect(() => {
    if (employee) {
      setName(employee.name);
      setSpecialty(employee.specialty);
      setDailySalary(employee.dailySalary);
      setCedula(employee.cedula || '');
      setPhone(employee.phone || '');
      setEmail(employee.email || '');
      setAddress(employee.address || '');
      setPhotoUrl(employee.photoUrl || null);
      setNotes(employee.notes || '');
    } else {
      // Reset form
      setName('');
      setSpecialty('');
      setDailySalary(0);
      setCedula('');
      setPhone('');
      setEmail('');
      setAddress('');
      setPhotoUrl(null);
      setNotes('');
    }
  }, [employee, isOpen]);

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    if (!name.trim() || !specialty.trim()) {
        setAlertMessage("Nombre y especialidad son obligatorios.");
        setIsAlertOpen(true);
        return;
    }
    if (dailySalary <= 0) {
        setAlertMessage("El salario diario debe ser un valor positivo.");
        setIsAlertOpen(true);
        return;
    }
    const employeeData = {
      id: employee?.id || '', // ID will be generated by localStorageManager if new
      name,
      specialty,
      dailySalary,
      cedula,
      phone,
      email,
      address,
      photoUrl: photoUrl || undefined,
      notes,
    };
    onEmployeeSaved(employeeData);
  };

  return (
    <>
    <Modal isOpen={isOpen} onClose={onClose} title={employee ? 'Editar Empleado' : 'Añadir Nuevo Empleado'} size="lg">
      <form onSubmit={handleSubmit} className="space-y-4">
        <ImageUpload 
            onImageSelected={setPhotoUrl} 
            currentImageUrl={photoUrl}
            label="Foto del Empleado"
        />
        <Input label="Nombre Completo" value={name} onChange={(e) => setName(e.target.value)} required />
        <Input label="Especialidad Principal" value={specialty} onChange={(e) => setSpecialty(e.target.value)} placeholder="Ej: Plomero, Pintor, Electricista" required />
        <Input label="Salario Diario (COP)" type="number" value={dailySalary.toString()} onChange={(e) => setDailySalary(parseFloat(e.target.value) || 0)} min="0.01" step="any" required />
        <Input label="Cédula (Opcional)" value={cedula} onChange={(e) => setCedula(e.target.value)} />
        <Input label="Teléfono (Opcional)" type="tel" value={phone} onChange={(e) => setPhone(e.target.value)} />
        <Input label="Correo Electrónico (Opcional)" type="email" value={email} onChange={(e) => setEmail(e.target.value)} />
        <Input label="Dirección (Opcional)" value={address} onChange={(e) => setAddress(e.target.value)} />
        <div>
            <label htmlFor="employee-notes" className="block text-sm font-bold text-[var(--color-text-secondary)] mb-1.5">Notas Adicionales</label>
            <textarea
                id="employee-notes"
                value={notes}
                onChange={(e) => setNotes(e.target.value)}
                rows={3}
                className="block w-full px-4 py-3 bg-[var(--color-surface-2)] border-2 border-[var(--color-border)] rounded-lg text-[var(--color-text-primary)] placeholder-[var(--color-text-secondary)] focus:outline-none focus:ring-2 focus:ring-[var(--color-aquamarine)] focus:border-[var(--color-aquamarine)] sm:text-sm font-medium"
                placeholder="Certificaciones, disponibilidad, etc."
            />
        </div>

        <div className="flex justify-end space-x-3 pt-2">
          <Button type="button" variant="secondary" onClick={onClose}>Cancelar</Button>
          <Button type="submit" variant="primary">{employee ? 'Guardar Cambios' : 'Añadir Empleado'}</Button>
        </div>
      </form>
    </Modal>
    <AlertModal
        isOpen={isAlertOpen}
        onClose={() => setIsAlertOpen(false)}
        title="Error de Validación"
        message={alertMessage}
    />
    </>
  );
};

export default EmployeeFormModal;
