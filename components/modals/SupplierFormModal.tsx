import React, { useState, useEffect, FormEvent } from 'react';
import Modal from '../ui/Modal';
import Input from '../ui/Input';
import Button from '../ui/Button';
import { Supplier } from '../../types';
import AlertModal from './AlertModal';

interface SupplierFormModalProps {
  isOpen: boolean;
  onClose: () => void;
  onSave: (supplier: Supplier) => void;
  supplier?: Supplier | null;
}

const SupplierFormModal: React.FC<SupplierFormModalProps> = ({ isOpen, onClose, onSave, supplier }) => {
  const [name, setName] = useState('');
  const [contactPerson, setContactPerson] = useState('');
  const [phone, setPhone] = useState('');
  const [email, setEmail] = useState('');
  const [address, setAddress] = useState('');
  const [notes, setNotes] = useState('');
  
  const [isAlertOpen, setIsAlertOpen] = useState(false);
  const [alertMessage, setAlertMessage] = useState('');

  useEffect(() => {
    if (supplier && isOpen) {
      setName(supplier.name);
      setContactPerson(supplier.contactPerson || '');
      setPhone(supplier.phone || '');
      setEmail(supplier.email || '');
      setAddress(supplier.address || '');
      setNotes(supplier.notes || '');
    } else if (!supplier && isOpen) {
      // Reset form for new supplier
      setName('');
      setContactPerson('');
      setPhone('');
      setEmail('');
      setAddress('');
      setNotes('');
    }
  }, [supplier, isOpen]);

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    if (!name.trim()) {
      setAlertMessage("El nombre del proveedor es obligatorio.");
      setIsAlertOpen(true);
      return;
    }
    const supplierData: Supplier = {
      id: supplier?.id || '', // ID will be generated by localStorageManager if new
      name,
      contactPerson,
      phone,
      email,
      address,
      notes,
    };
    onSave(supplierData);
  };

  return (
    <>
      <Modal isOpen={isOpen} onClose={onClose} title={supplier ? 'Editar Proveedor' : 'Añadir Nuevo Proveedor'} size="lg">
        <form onSubmit={handleSubmit} className="space-y-4">
          <Input
            label="Nombre de la Empresa / Proveedor"
            value={name}
            onChange={(e) => setName(e.target.value)}
            placeholder="Ej: Ferretería Central S.A.S."
            required
          />
          <Input
            label="Persona de Contacto (Opcional)"
            value={contactPerson}
            onChange={(e) => setContactPerson(e.target.value)}
            placeholder="Ej: Ana López"
          />
          <Input
            label="Teléfono (Opcional)"
            type="tel"
            value={phone}
            onChange={(e) => setPhone(e.target.value)}
            placeholder="Ej: 3001234567"
          />
          <Input
            label="Correo Electrónico (Opcional)"
            type="email"
            value={email}
            onChange={(e) => setEmail(e.target.value)}
            placeholder="Ej: ventas@proveedor.com"
          />
          <Input
            label="Dirección (Opcional)"
            value={address}
            onChange={(e) => setAddress(e.target.value)}
            placeholder="Ej: Carrera 5 # 10-15"
          />
          <div>
              <label htmlFor="supplier-notes" className="block text-sm font-bold text-[var(--color-text-secondary)] mb-1.5">Notas Adicionales (Opcional)</label>
              <textarea
                  id="supplier-notes"
                  value={notes}
                  onChange={(e) => setNotes(e.target.value)}
                  rows={3}
                  className="block w-full px-4 py-3 bg-[var(--color-surface-2)] border-2 border-[var(--color-border)] rounded-lg text-[var(--color-text-primary)] placeholder-[var(--color-text-secondary)] focus:outline-none focus:ring-2 focus:ring-[var(--color-aquamarine)] focus:border-[var(--color-aquamarine)] sm:text-sm font-medium"
                  placeholder="Horarios, condiciones especiales, tipos de productos principales, etc."
              />
          </div>
          <div className="flex justify-end space-x-3 pt-2">
            <Button type="button" variant="secondary" onClick={onClose}>
              Cancelar
            </Button>
            <Button type="submit" variant="primary">
              {supplier ? 'Guardar Cambios' : 'Añadir Proveedor'}
            </Button>
          </div>
        </form>
      </Modal>
      <AlertModal
          isOpen={isAlertOpen}
          onClose={() => setIsAlertOpen(false)}
          title="Error de Validación"
          message={alertMessage}
      />
    </>
  );
};

export default SupplierFormModal;