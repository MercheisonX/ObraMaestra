
import React, { useState, useEffect, FormEvent } from 'react';
import Modal from '../ui/Modal';
import Input from '../ui/Input';
import Select from '../ui/Select';
import Button from '../ui/Button';
import ImageUpload from '../ui/ImageUpload';
import { Tool } from '../../types';
import { TOOL_STATUS_OPTIONS } from '../../constants';

interface ToolFormModalProps {
  isOpen: boolean;
  onClose: () => void;
  onToolSaved: (tool: Tool) => void;
  tool?: Tool | null;
}

const ToolFormModal: React.FC<ToolFormModalProps> = ({ isOpen, onClose, onToolSaved, tool }) => {
  const [name, setName] = useState('');
  const [status, setStatus] = useState<'disponible' | 'en uso' | 'en reparación'>('disponible');
  const [acquisitionDate, setAcquisitionDate] = useState('');
  const [lastMaintenanceDate, setLastMaintenanceDate] = useState('');
  const [description, setDescription] = useState('');
  const [photoUrl, setPhotoUrl] = useState<string | null>(null);

  useEffect(() => {
    if (tool) {
      setName(tool.name);
      setStatus(tool.status);
      setAcquisitionDate(tool.acquisitionDate || '');
      setLastMaintenanceDate(tool.lastMaintenanceDate || '');
      setDescription(tool.description || '');
      setPhotoUrl(tool.photoUrl || null);
    } else {
      // Reset form
      setName('');
      setStatus('disponible');
      setAcquisitionDate('');
      setLastMaintenanceDate('');
      setDescription('');
      setPhotoUrl(null);
    }
  }, [tool, isOpen]);

  const handleSubmit = (e: FormEvent) => {
    e.preventDefault();
    if (!name) {
        alert("El nombre de la herramienta es obligatorio.");
        return;
    }
    const toolData = {
      id: tool?.id || '', // ID will be generated by localStorageManager if new
      name,
      status,
      acquisitionDate: acquisitionDate || undefined,
      lastMaintenanceDate: lastMaintenanceDate || undefined,
      description: description || undefined,
      photoUrl: photoUrl || undefined,
    };
    onToolSaved(toolData);
  };

  return (
    <Modal isOpen={isOpen} onClose={onClose} title={tool ? 'Editar Herramienta' : 'Añadir Nueva Herramienta'} size="lg">
      <form onSubmit={handleSubmit} className="space-y-4">
        <ImageUpload 
            onImageSelected={setPhotoUrl} 
            currentImageUrl={photoUrl}
            label="Foto de la Herramienta (Opcional)"
        />
        <Input label="Nombre de la Herramienta" value={name} onChange={(e) => setName(e.target.value)} required />
        <Select 
            label="Estado Actual"
            options={TOOL_STATUS_OPTIONS}
            value={status}
            onChange={(e) => setStatus(e.target.value as typeof status)}
            required
        />
        <Input label="Fecha de Adquisición (Opcional)" type="date" value={acquisitionDate} onChange={(e) => setAcquisitionDate(e.target.value)} />
        <Input label="Fecha Último Mantenimiento (Opcional)" type="date" value={lastMaintenanceDate} onChange={(e) => setLastMaintenanceDate(e.target.value)} />
        <div>
            <label htmlFor="tool-description" className="block text-sm font-bold text-[var(--color-text-secondary)] mb-1.5">Descripción (Opcional)</label>
            <textarea
                id="tool-description"
                value={description}
                onChange={(e) => setDescription(e.target.value)}
                rows={3}
                className="block w-full px-4 py-3 bg-[var(--color-surface-2)] border-2 border-[var(--color-border)] rounded-lg text-[var(--color-text-primary)] placeholder-[var(--color-text-secondary)] focus:outline-none focus:ring-2 focus:ring-[var(--color-aquamarine)] focus:border-[var(--color-aquamarine)] sm:text-sm font-medium"
                placeholder="Marca, modelo, número de serie, observaciones."
            />
        </div>
        <div className="flex justify-end space-x-3 pt-2">
          <Button type="button" variant="secondary" onClick={onClose}>Cancelar</Button>
          <Button type="submit" variant="primary">{tool ? 'Guardar Cambios' : 'Añadir Herramienta'}</Button>
        </div>
      </form>
    </Modal>
  );
};

export default ToolFormModal;
